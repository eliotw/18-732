
section .text

	global _start

_start:

	jmp short	OpenCall

open:

	pop esi
	xor eax, eax
	mov byte 	[esi + 7], al
	lea ebx, [esi]
	mov cl, 65		; Moved to lower ecx to remove nulls
	mov dx, 438		; Moved to lower edx to remove nulls
	mov al, 5
	int 0x80	
	push eax
	jmp short	WriteCall	

write:

	pop esi			; pop string pointer into esi
	xor eax, eax		; create null byte in eax
	mov byte [esi + 9], al	; add null terminator (probably not needed)
	lea	ecx, [esi]	; load string pointer into ecx
	pop ebx			; pop fd to ebx
	xor edx, edx		; Clear out edx or else we will write more bytes than we want
	mov dl, 9		; Write only 9 bytes
	mov al, 4		; Set eax to 4 for write syscall
	int 0x80

close:

	mov al, 6
	int 0x80

exit:

	xor ebx, ebx
	mov al, 1
	int 0x80

OpenCall:

	Call open
	Db	'foo.txtA'

WriteCall:

	Call write
	Db	'You Lose!A'
